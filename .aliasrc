export PATH=$PATH:/apollo/env/BarkCLI/bin
export PATH="/apollo/env/DdbStorageApiOncallTools/bin:$PATH"
export PATH="/home/jonatgao/workplace/ddblogservicepythontools/src/DdbLogServicePythonTools/bin:$PATH"
export PATH="/apollo/env/CarnavalCLITools/bin:$PATH"
export PATH=$HOME/.toolbox/bin:$PATH
export PATH="/usr/local/bin:$PATH"
export PATH="/home/linuxbrew/.linuxbrew/bin:/home/linuxbrew/.linuxbrew/sbin:$PATH"
export PATH=$PATH:/apollo/env/envImprovement/bin
export PATH=/home/jonatgao/.cargo/bin:$PATH
export PATH=/home/jonatgao/.sdkman/candidates/java/current/bin:$PATH
export PATH=~/.rodar/bin:$PATH
export EDITOR=nvim


alias bb=brazil-build

alias bba='brazil-build apollo-pkg'
alias bre='brazil-runtime-exec'
alias brc='brazil-recursive-cmd'
alias brca='brazil-recursive-cmd --allPackages'
alias bws='brazil ws'
alias bwsuse='bws use --gitMode -p'
alias bwscreate='bws create -n'
alias brc=brazil-recursive-cmd
alias bbr='brc brazil-build'
alias bball='brc --allPackages'
alias bbb='brc --allPackages brazil-build'
alias bbbb='brc --allPackages brazil-build build'
alias bbra='bbr apollo-pkg'
alias kw="kinit -f && mwinit -o -s"
alias barkd="bark -cf=/home/$USER/.barkDub"
alias ic="isengardcli"
alias sshy="ssh -o StrictHostKeyChecking=no"
alias bbmysql="sudo mysql -S /tmp/mysql45691.sock -uroot -proot"
alias bbvisualizewatch="brazil-build visualize & brazil-build visualize-watch && fg"
alias ta="tmux a"
alias emacs="emacsclient -c -a 'emacs'"
alias lptvc="/apollo/env/CatalystResourceCreationClientTools/bin/LptVerifierCli --lpt-verifier-action static_analysis --lpt-app-def build/application_definition.json"
export TEST_RUNTIME=/local/home/jonatgao/workplace/bigbirdstoragenode/src/BigBirdStorageNode/build/private/tmp/BigBirdStorageNode
export LN_TEST_STORAGENODE=/local/home/jonatgao/workplace/ddblognode/src/BigBirdStorageNode/build/private/tmp/BigBirdStorageNode
export LN_TEST_RUNTIME=/local/home/jonatgao/workplace/ddblognode/src/DdbLogNodeTest/build/private/tmp/BigBirdStorageNode
alias setuptestruntime="./testbin/setup-test-runtime -s -b -n -e ${TEST_RUNTIME}"
alias setuplntestruntime="./testbin/setup-test-runtime -s -b -n -e ${LN_TEST_RUNTIME}"

# get current date in Pacific time
today() {
    date -I -d "-8 hours"
}

shttp() {
    share-http $1 8787 --bind $(hostname)
}

checkintestrunner() {
    sudo /apollo/env/BigBirdCheckinTestRunner/bin/checkin_test.py --root $(pwd -P | cut -d/ -f1-6) --init $1 --poll
}

code() {
	local FILEPATH=${$(realpath "$1")##/local/home/jonatgao/}
	echo "Opening code at: /Users/jonatgao/$FILEPATH"
	ssh -p 20202 jonatgao@localhost "/usr/local/bin/code /Users/jonatgao/$FILEPATH"
}
idea() {
	local FILEPATH=${$(realpath "$1")##/local/home/jonatgao/}
	echo "Opening idea at: /Users/jonatgao/$FILEPATH"
	ssh -p 20202 jonatgao@localhost "/usr/local/bin/idea /Users/jonatgao/$FILEPATH"
}
localcmd() {
	local FILEPATH="/Users/jonatgao/${$(realpath $(pwd))##/local/home/jonatgao/}"
	echo "Running ${@:1} at: $FILEPATH"
	local PROGRAMPATH="/Users/jonatgao/.toolbox/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin"
	ssh -p 20202 jonatgao@localhost "export PATH=$PATH:$PROGRAMPATH; cd $FILEPATH; "${@:1}""
}

mkcd () {
  case "$1" in
    */..|*/../) cd -- "$1";; # that doesn't make any sense unless the directory already exists
    /*/../*) (cd "${1%/../*}/.." && mkdir -p "./${1##*/../}") && cd -- "$1";;
    /*) mkdir -p "$1" && cd "$1";;
    */../*) (cd "./${1%/../*}/.." && mkdir -p "./${1##*/../}") && cd "./$1";;
    ../*) (cd .. && mkdir -p "${1#.}") && cd "$1";;
    *) mkdir -p "./$1" && cd "./$1";;
  esac
}

scratch() {
  mkcd /home/jonatgao/workplace/ddblogservicepythontools/src/DdbLogServicePythonTools/scratchpad/$(today)
}

alias sc="scratch && pwd"


mksc() {
    sc
    mkcd "$1"
}

infradb() {
    pass=$(/apollo/env/envImprovement/bin/odin-get com.amazon.bigbird.provisioning.infradb -t Credential)
    user=$(/apollo/env/envImprovement/bin/odin-get com.amazon.bigbird.provisioning.infradb -t Principal)
    mysql -A --skip-secure-auth -h infra-mysql-query.db.corp.amazon.com -u${user} -p${pass} infra "$@"
}

function d() {
  REGION=$1
  TABLE_NAME=$2; shift; shift;
  local scan
  local leadingKey
  local trailingKey
  local jsoncatoptions
  local grepstring
  local oflag
  local tflag
  while getopts l:t:o:g: flag; do
      case $flag in
          l) leadingKey="--leading-key ${OPTARG}" ;;
          t) trailingKey="--trailing-key ${OPTARG}" ;;
          o) jsoncatoptions="${OPTARG}" ;;
          g) grepstring="${OPTARG}" ;;
      esac
  done
  outputCommand=jsoncat
  if [[ -n $jsoncatoptions ]]; then
      oflag="-o"
      tflag="-t"
  fi

  if [[ -z $leadingKey && -z $trailingKey ]]; then
  scan="--scan"
  fi

  if [[ -n $grepstring ]]; then
    eval "ddb $REGION tools tableDumper --tableName $TABLE_NAME $scan $leadingKey $trailingKey | grep $grepstring | $outputCommand $tflag $oflag $jsoncatoptions"
  else
    eval "ddb $REGION tools tableDumper --tableName $TABLE_NAME $scan $leadingKey $trailingKey | $outputCommand $tflag $oflag $jsoncatoptions"
  fi
}


function t() {
  REGION=$1; shift
  ddb $REGION tools taskViewer -i
}

function e() {
  REGION=$1; shift
  ddb $REGION tools eventSteward 
}

function utcdate() {
  date -d "@$(($1/1000))"
}

# Enables autocompletion for the ddb command - Installed by MechanicBigBirdCli
[ -f "/apollo/env/MechanicBigBirdCli/bin/mechanic-autocomplete.sh" ] && source "/apollo/env/MechanicBigBirdCli/bin/mechanic-autocomplete.sh"

