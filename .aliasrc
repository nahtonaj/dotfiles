export PATH=$PATH:/apollo/env/BarkCLI/bin
export PATH="/apollo/env/DdbStorageApiOncallTools/bin:$PATH"
export PATH="/home/jonatgao/workplace/ddblogservicepythontools/src/DdbLogServicePythonTools/bin:$PATH"
export PATH="/apollo/env/CarnavalCLITools/bin:$PATH"
export PATH=$HOME/.toolbox/bin:$PATH
export PATH="/usr/local/bin:$PATH"
export PATH="/home/linuxbrew/.linuxbrew/bin:/home/linuxbrew/.linuxbrew/sbin:$PATH"
export PATH=$PATH:/apollo/env/envImprovement/bin
export PATH=/home/jonatgao/.cargo/bin:$PATH
export PATH=/home/jonatgao/.sdkman/candidates/java/current/bin:$PATH
export PATH=~/.rodar/bin:$PATH
export PATH=/apollo/sbin:$PATH
export PATH="$PATH:$HOME/workplace/dotfiles/scripts"
export EDITOR=nvim


alias bb=brazil-build

alias bba='brazil-build apollo-pkg'
alias bre='brazil-runtime-exec'
alias brc='brazil-recursive-cmd'
alias brca='brazil-recursive-cmd --allPackages'
alias bws='brazil ws'
alias bwsuse='bws use --gitMode -p'
alias bwscreate='bws create -n'
alias brc=brazil-recursive-cmd
alias bbr='brc brazil-build'
alias bball='brc --allPackages'
alias bbb='brc --allPackages brazil-build'
alias bbbb='brc --allPackages brazil-build build'
alias bbra='bbr apollo-pkg'
alias kw="kinit -f && mwinit -o -s"
alias barkd="bark -cf=/home/$USER/.barkDub"
alias ic="isengardcli"
alias sshy="ssh -o StrictHostKeyChecking=no"
alias bbmysql="sudo mysql -S /tmp/mysql45691.sock -uroot -proot"
alias bbvisualizewatch="brazil-build visualize & brazil-build visualize-watch && fg"
alias ta="tmux a"
alias emacs="emacsclient -c -a 'emacs'"
alias lptvc="/apollo/env/CatalystResourceCreationClientTools/bin/LptVerifierCli --lpt-verifier-action static_analysis --lpt-app-def build/application_definition.json"
export TEST_RUNTIME=/local/home/jonatgao/workplace/bigbirdstoragenode/src/BigBirdStorageNode/build/private/tmp/BigBirdStorageNode
export LN_TEST_STORAGENODE=/local/home/jonatgao/workplace/ddblognode/src/BigBirdStorageNode/build/private/tmp/BigBirdStorageNode
export LN_TEST_RUNTIME=/local/home/jonatgao/workplace/ddblognode/src/DdbLogNodeTest/build/private/tmp/BigBirdStorageNode
alias setuptestruntime="./testbin/setup-test-runtime -s -b -n -e ${TEST_RUNTIME}"
alias setuplntestruntime="./testbin/setup-test-runtime -s -b -n -e ${LN_TEST_RUNTIME}"

# get current date in Pacific time
today() {
    date -I -d "-8 hours"
}

shttp() {
    share-http $1 8787 --bind $(hostname)
}

checkintestrunner() {
    sudo /apollo/env/BigBirdCheckinTestRunner/bin/checkin_test.py --root $(pwd -P | cut -d/ -f1-6) --init $1 --poll
}

code() {
	local FILEPATH=${$(realpath "$1")##/local/home/jonatgao/}
	echo "Opening code at: /Users/jonatgao/$FILEPATH"
	ssh -p 20202 jonatgao@localhost "/usr/local/bin/code /Users/jonatgao/$FILEPATH"
}
idea() {
	local FILEPATH=${$(realpath "$1")##/local/home/jonatgao/}
	echo "Opening idea at: /Users/jonatgao/$FILEPATH"
	ssh -p 20202 jonatgao@localhost "/usr/local/bin/idea /Users/jonatgao/$FILEPATH"
}
localcmd() {
	local FILEPATH="/Users/jonatgao/${$(realpath $(pwd))##/local/home/jonatgao/}"
	echo "Running ${@:1} at: $FILEPATH"
	local PROGRAMPATH="/Users/jonatgao/.toolbox/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin"
	ssh -p 20202 jonatgao@localhost "export PATH=$PATH:$PROGRAMPATH; cd $FILEPATH; "${@:1}""
}

mkcd () {
  case "$1" in
    */..|*/../) cd -- "$1";; # that doesn't make any sense unless the directory already exists
    /*/../*) (cd "${1%/../*}/.." && mkdir -p "./${1##*/../}") && cd -- "$1";;
    /*) mkdir -p "$1" && cd "$1";;
    */../*) (cd "./${1%/../*}/.." && mkdir -p "./${1##*/../}") && cd "./$1";;
    ../*) (cd .. && mkdir -p "${1#.}") && cd "$1";;
    *) mkdir -p "./$1" && cd "./$1";;
  esac
}

scratch() {
  mkcd /home/jonatgao/workplace/ddblogservicepythontools/src/DdbLogServicePythonTools/scratchpad/$(today)
}

alias sc="scratch && pwd"


mksc() {
    sc
    mkcd "$1"
}

infradb() {
    pass=$(/apollo/env/envImprovement/bin/odin-get com.amazon.bigbird.provisioning.infradb -t Credential)
    user=$(/apollo/env/envImprovement/bin/odin-get com.amazon.bigbird.provisioning.infradb -t Principal)
    mysql -A --skip-secure-auth -h infra-mysql-query.db.corp.amazon.com -u${user} -p${pass} infra "$@"
}

function d() {
  REGION=$1
  TABLE_NAME=$2; shift; shift;
  local scan
  local leadingKey
  local trailingKey
  local jsoncatoptions
  local grepstring
  local oflag
  local tflag
  while getopts l:t:o:g: flag; do
      case $flag in
          l) leadingKey="--leading-key ${OPTARG}" ;;
          t) trailingKey="--trailing-key ${OPTARG}" ;;
          o) jsoncatoptions="${OPTARG}" ;;
          g) grepstring="${OPTARG}" ;;
      esac
  done
  outputCommand=jsoncat
  if [[ -n $jsoncatoptions ]]; then
      oflag="-o"
      tflag="-t"
  fi

  if [[ -z $leadingKey && -z $trailingKey ]]; then
  scan="--scan"
  fi

  if [[ -n $grepstring ]]; then
    eval "ddb $REGION tools tableDumper --tableName $TABLE_NAME $scan $leadingKey $trailingKey | grep $grepstring | $outputCommand $tflag $oflag $jsoncatoptions"
  else
    eval "ddb $REGION tools tableDumper --tableName $TABLE_NAME $scan $leadingKey $trailingKey | $outputCommand $tflag $oflag $jsoncatoptions"
  fi
}


function t() {
  REGION=$1; shift
  ddb $REGION tools taskViewer -i
}

function e() {
  REGION=$1; shift
  ddb $REGION tools eventSteward 
}

function utcdate() {
  date -d "@$(($1/1000))"
}

# Enables autocompletion for the ddb command - Installed by MechanicBigBirdCli
[ -f "/apollo/env/MechanicBigBirdCli/bin/mechanic-autocomplete.sh" ] && source "/apollo/env/MechanicBigBirdCli/bin/mechanic-autocomplete.sh"


# Add AmazonAwsCli bin directory to PATH for isengard command
export PATH=$PATH:/apollo/env/AmazonAwsCli/bin

# GTAS local server helper function
gtas() {
    creds=$(isengard get 398173856169 Admin)
    access_key=$(echo "$creds" | grep AWS_ACCESS_KEY_ID | cut -d '"' -f2)
    secret_key=$(echo "$creds" | grep AWS_SECRET_ACCESS_KEY | cut -d '"' -f2)
    session_token=$(echo "$creds" | grep AWS_SESSION_TOKEN | cut -d '"' -f2)
    `isengard get 601134390254 GTASLocalServer | tr -d "\""`;export workflowAwsAccessKeyId=$access_key && export workflowAwsSecretAccessKey=$secret_key && export workflowAwsSessionToken=$session_token;brazil-build server
}

# GTAS DUB local server helper function
gtas_dub() {
    creds=$(isengard get 398173856169 Admin)
    access_key=$(echo "$creds" | grep AWS_ACCESS_KEY_ID | cut -d '"' -f2)
    secret_key=$(echo "$creds" | grep AWS_SECRET_ACCESS_KEY | cut -d '"' -f2)
    session_token=$(echo "$creds" | grep AWS_SESSION_TOKEN | cut -d '"' -f2)
    `isengard get 210665712600 GTASLocalServer | tr -d "\""`;export workflowAwsAccessKeyIdDub=$access_key && export workflowAwsSecretAccessKeyDub=$secret_key && export workflowAwsSessionTokenDub=$session_token;bb server-dub
}
# Q Chat alias with comprehensive read-only tools
qc() {
    # Built-in read-only tools (removed execute_bash)
    local readonly_tools="fs_read,@report_issue/report_issue,use_aws"
    
    # amzn_mcp read-only tools
    readonly_tools+=",@amzn_mcp/andes_provider,@amzn_mcp/andes_search,@amzn_mcp/andes_table"
    readonly_tools+=",@amzn_mcp/cradle_get_job_details,@amzn_mcp/cradle_get_job_run_details,@amzn_mcp/cradle_get_profile"
    readonly_tools+=",@amzn_mcp/cradle_list_job_runs,@amzn_mcp/cradle_list_jobs,@amzn_mcp/cradle_list_profiles"
    readonly_tools+=",@amzn_mcp/cradle_search_jobs,@amzn_mcp/cradle_search_profiles"
    readonly_tools+=",@amzn_mcp/datanet_reader,@amzn_mcp/datanet_search"
    readonly_tools+=",@amzn_mcp/eureka_web_search,@amzn_mcp/fetch_oncall_rotations,@amzn_mcp/fetch_oncall_schedule"
    readonly_tools+=",@amzn_mcp/g2s2_get,@amzn_mcp/g2s2_list_stage_version"
    readonly_tools+=",@amzn_mcp/genai_poweruser_agent_script_get,@amzn_mcp/genai_poweruser_agent_script_list"
    readonly_tools+=",@amzn_mcp/genai_poweruser_agent_script_search,@amzn_mcp/genai_poweruser_get_knowledge_metadata"
    readonly_tools+=",@amzn_mcp/genai_poweruser_get_knowledge_structure,@amzn_mcp/genai_poweruser_list_knowledge"
    readonly_tools+=",@amzn_mcp/genai_poweruser_read_knowledge,@amzn_mcp/genai_poweruser_search_knowledge"
    readonly_tools+=",@amzn_mcp/get_folder_quip,@amzn_mcp/get_katal_component,@amzn_mcp/get_recent_messages_quip"
    readonly_tools+=",@amzn_mcp/get_thread_folders_quip,@amzn_mcp/imr_costs_get_fleet_summary,@amzn_mcp/imr_costs_search_fleet"
    readonly_tools+=",@amzn_mcp/jira_config_helper,@amzn_mcp/jira_get_attachment,@amzn_mcp/jira_get_issue"
    readonly_tools+=",@amzn_mcp/jira_search_issues,@amzn_mcp/list_katal_components,@amzn_mcp/lookup_team_code_resource"
    readonly_tools+=",@amzn_mcp/lookup_user_coding_activity_summary,@amzn_mcp/mermaid,@amzn_mcp/mosaic_list_controls"
    readonly_tools+=",@amzn_mcp/mosaic_list_risks,@amzn_mcp/mox_console,@amzn_mcp/oncall_compass_get_report"
    readonly_tools+=",@amzn_mcp/oncall_compass_query_reports,@amzn_mcp/orca_get_latest_error_details,@amzn_mcp/orca_list_runs"
    readonly_tools+=",@amzn_mcp/overleaf_read_file,@amzn_mcp/pipeline_current_blockers,@amzn_mcp/pippin_get_artifact"
    readonly_tools+=",@amzn_mcp/pippin_get_project,@amzn_mcp/pippin_list_artifacts,@amzn_mcp/pippin_list_projects"
    readonly_tools+=",@amzn_mcp/pippin_sync_project_to_local,@amzn_mcp/plantuml,@amzn_mcp/policy_engine_get_risk"
    readonly_tools+=",@amzn_mcp/policy_engine_get_user_dashboard,@amzn_mcp/prompt_farm_prompt_content,@amzn_mcp/prompt_farm_search_prompts"
    readonly_tools+=",@amzn_mcp/read_coe,@amzn_mcp/read_internal_website,@amzn_mcp/read_kingpin_goal"
    readonly_tools+=",@amzn_mcp/read_orr,@amzn_mcp/read_permissions,@amzn_mcp/read_quip"
    readonly_tools+=",@amzn_mcp/rtla_fetch_logs,@amzn_mcp/rtla_fetch_single_request_logs,@amzn_mcp/sage_get_tag_details"
    readonly_tools+=",@amzn_mcp/sage_search_tags,@amzn_mcp/search_acronym_central,@amzn_mcp/search_ags_confluence_website"
    readonly_tools+=",@amzn_mcp/search_datapath,@amzn_mcp/search_eventstream,@amzn_mcp/search_internal_code"
    readonly_tools+=",@amzn_mcp/search_internal_issues,@amzn_mcp/search_internal_websites,@amzn_mcp/search_katal_components"
    readonly_tools+=",@amzn_mcp/search_people,@amzn_mcp/search_products,@amzn_mcp/search_quip"
    readonly_tools+=",@amzn_mcp/search_sable,@amzn_mcp/search_symphony,@amzn_mcp/sfdc_account_lookup"
    readonly_tools+=",@amzn_mcp/sfdc_contact_lookup,@amzn_mcp/sfdc_list_tasks_activity,@amzn_mcp/sfdc_opportunity_lookup"
    readonly_tools+=",@amzn_mcp/sfdc_territory_lookup,@amzn_mcp/sfdc_user_lookup,@amzn_mcp/sim_get_folders"
    readonly_tools+=",@amzn_mcp/sim_get_issue,@amzn_mcp/sim_search_issues,@amzn_mcp/taskei_get_room_identities"
    readonly_tools+=",@amzn_mcp/taskei_get_rooms,@amzn_mcp/taskei_get_sprints,@amzn_mcp/taskei_get_task"
    readonly_tools+=",@amzn_mcp/tod_download_logs"
    
    # builder_mcp read-only tools
    readonly_tools+=",@builder_mcp/GetDogmaClassification,@builder_mcp/GetDogmaRecommendations"
    readonly_tools+=",@builder_mcp/InternalCodeSearch,@builder_mcp/InternalSearch"
    readonly_tools+=",@builder_mcp/OncallReadActions,@builder_mcp/PipelineTool"
    readonly_tools+=",@builder_mcp/ReadInternalWebsites,@builder_mcp/ReadRemoteTestRunLogs"
    readonly_tools+=",@builder_mcp/SearchAcronymCentral,@builder_mcp/TaskeiGetRooms"
    readonly_tools+=",@builder_mcp/TaskeiGetTask,@builder_mcp/TaskeiListTasks"
    readonly_tools+=",@builder_mcp/TicketingReadActions,@builder_mcp/WorkspaceGitDetails"
    readonly_tools+=",@builder_mcp/WorkspaceSearch,@builder_mcp/CheckFilepathForCAZ"
    
    # genai_power_users read-only tools
    readonly_tools+=",@genai_power_users/agent_script_get,@genai_power_users/agent_script_list"
    readonly_tools+=",@genai_power_users/agent_script_search,@genai_power_users/get_knowledge_metadata"
    readonly_tools+=",@genai_power_users/get_knowledge_structure,@genai_power_users/list_knowledge"
    readonly_tools+=",@genai_power_users/read_knowledge,@genai_power_users/search_knowledge"
    
    # wasabi read-only tools
    readonly_tools+=",@wasabi/InternalSearch,@wasabi/OncallReadActions"
    readonly_tools+=",@wasabi/PipelineTool,@wasabi/ReadInternalWebsites,@wasabi/ReadRemoteTestRunLogs"
    readonly_tools+=",@wasabi/SearchAcronymCentral,@wasabi/TaskeiGetRooms,@wasabi/TaskeiGetTask"
    readonly_tools+=",@wasabi/TaskeiListTasks,@wasabi/TicketingReadActions,@wasabi/WorkspaceGitDetails"
    readonly_tools+=",@wasabi/WorkspaceSearch,@wasabi/CheckFilepathForCAZ"
    
    q chat --trust-tools="$readonly_tools" "$@"
}
